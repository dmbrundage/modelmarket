[{"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\index.js":"1","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\App.js":"2","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\reportWebVitals.js":"3","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Header.js":"4","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\LoginPage.js":"5","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\Submitpage.js":"6","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\UserDashboard.js":"7","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\DiscussionPage.js":"8","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\Homepage.js":"9","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Login.js":"10","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\discussion.js":"11","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\dashboard.js":"12","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\NavContent.js":"13","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\ContentCards.js":"14","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Submit.js":"15","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\comments.js":"16","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Chart.js":"17","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\downloadDashTile.js":"18","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\commentDashTile.js":"19","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\favoriteDashTile.js":"20","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\listitems.js":"21","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Orders.js":"22","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Title.js":"23","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\comment.js":"24","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\ModelUpload.js":"25","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Review.js":"26","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\SubmissionInfo.js":"27"},{"size":618,"mtime":1612789481901,"results":"28","hashOfConfig":"29"},{"size":3556,"mtime":1612988214325,"results":"30","hashOfConfig":"29"},{"size":375,"mtime":1612240688745,"results":"31","hashOfConfig":"29"},{"size":2569,"mtime":1612791130606,"results":"32","hashOfConfig":"29"},{"size":244,"mtime":1612278212508,"results":"33","hashOfConfig":"29"},{"size":247,"mtime":1612278212509,"results":"34","hashOfConfig":"29"},{"size":302,"mtime":1612543402609,"results":"35","hashOfConfig":"29"},{"size":538,"mtime":1612986949713,"results":"36","hashOfConfig":"29"},{"size":1632,"mtime":1612788836270,"results":"37","hashOfConfig":"29"},{"size":3372,"mtime":1612296993113,"results":"38","hashOfConfig":"29"},{"size":3697,"mtime":1612988065967,"results":"39","hashOfConfig":"29"},{"size":7180,"mtime":1612548302161,"results":"40","hashOfConfig":"29"},{"size":3788,"mtime":1612656316854,"results":"41","hashOfConfig":"29"},{"size":7018,"mtime":1612823362838,"results":"42","hashOfConfig":"29"},{"size":15936,"mtime":1613066093066,"results":"43","hashOfConfig":"29"},{"size":931,"mtime":1612883980328,"results":"44","hashOfConfig":"29"},{"size":1761,"mtime":1612546779528,"results":"45","hashOfConfig":"29"},{"size":1137,"mtime":1612548064985,"results":"46","hashOfConfig":"29"},{"size":1137,"mtime":1612549472664,"results":"47","hashOfConfig":"29"},{"size":1136,"mtime":1612548187833,"results":"48","hashOfConfig":"29"},{"size":2133,"mtime":1612547945585,"results":"49","hashOfConfig":"29"},{"size":2558,"mtime":1612546679061,"results":"50","hashOfConfig":"29"},{"size":376,"mtime":1612543759201,"results":"51","hashOfConfig":"29"},{"size":2319,"mtime":1612647524004,"results":"52","hashOfConfig":"29"},{"size":1207,"mtime":1612970594737,"results":"53","hashOfConfig":"29"},{"size":2414,"mtime":1612291396776,"results":"54","hashOfConfig":"29"},{"size":6511,"mtime":1612968541873,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"f3ftah",{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\index.js",[],["124","125"],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\App.js",["126","127"],"import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header';\r\nimport { BrowserRouter as Router, Switch, withRouter } from \"react-router-dom\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Loginpage from './pages/LoginPage';\r\nimport Homepage from './pages/Homepage';\r\nimport Submitpage from './pages/Submitpage';\r\nimport Discussionpage from './pages/DiscussionPage';\r\nimport Dashboardpage from './pages/UserDashboard';\r\n//import * as comment_data from './pages/data/comment_file';\r\n//import * as model_data from './pages/data/model_file';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      model_data: [],\r\n      comment_data: [],\r\n      inputvalue: \"\",\r\n      filtereddata: [],\r\n      filtered_comment_data: [],\r\n      modelid: 0\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://localhost:5000/api/comments')\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        this.setState({ comment_data: data }, this.myFunction)\r\n        this.setState({ filtered_comment_data: data }, this.myFunction)\r\n        console.log(data)\r\n      })\r\n      .catch(console.log)\r\n\r\n    fetch('http://localhost:5000/api/models')\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        this.setState({ model_data: data }, this.myFunction)\r\n        this.setState({ filtereddata: data }, this.myFunction)\r\n        console.log(data)\r\n      })\r\n      .catch(console.log)\r\n  }\r\n  filtervalue = shared_value => {\r\n    console.log(shared_value)\r\n    const filteredcards = this.state.model_data.filter((card) => card.tags.includes(shared_value))\r\n    this.setState({ filtereddata: filteredcards }, this.myFunction);\r\n\r\n  }\r\n  resetfilter = shared_value => {\r\n    console.log(shared_value)\r\n    const filteredcards = this.state.model_data.filter((card) => card.resettags.includes(shared_value))\r\n    this.setState({ filtereddata: filteredcards }, this.myFunction);\r\n\r\n  }\r\n  handleComment = shared_value => {\r\n    console.log(shared_value)\r\n    this.setState({ comment_data: shared_value }, this.myFunction);\r\n\r\n  }\r\n  modelSelected = shared_value => {\r\n    console.log(shared_value)\r\n    const filteredcomments = this.state.comment_data.filter((comment) => comment.modelid == shared_value)\r\n    this.setState({ filtered_comment_data: filteredcomments }, this.myFunction2);\r\n    this.setState({ modelid: shared_value })\r\n    console.log(filteredcomments)\r\n  }\r\n  myFunction2 = () => {\r\n    const { filtered_comment_data } = this.state;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    console.log(prevProps)\r\n    console.log(this.state)\r\n  }\r\n  render() {\r\n\r\n    console.log(this.state.comment_data)\r\n    return (\r\n      < Switch >\r\n        <Router>\r\n          <Header />\r\n          <div className=\"App\">\r\n            <Route exact path='/' component={() => <Homepage data={this.state.model_data} filtereddata={this.state.filtereddata} filtervalue={this.filtervalue} resetfilter={this.resetfilter} modelSelected={this.modelSelected.bind(this)} />} />\r\n            <Route exact path=\"/Login\" component={Loginpage} />\r\n            <Route exact path=\"/Submit\" component={withRouter(Submitpage)} />\r\n            <Route exact path=\"/Discuss\" component={() => <Discussionpage filtered_comment_data={this.state.filtered_comment_data} modelid={this.state.modelid} handleComment={this.handleComment} />} />\r\n            <Route exact path=\"/Profile\" component={Dashboardpage} />\r\n          </div>\r\n        </Router>\r\n      </ Switch>);\r\n  }\r\n}\r\nexport default App;\r\n","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\reportWebVitals.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Header.js",["128","129","130","131"],"import { AppBar, Toolbar, Typography, makeStyles, Button, Link } from \"@material-ui/core\";\r\nimport SearchBar from \"material-ui-search-bar\";\r\nimport React from \"react\";\r\nimport { Link as RLink, Redirect } from \"react-router-dom\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  header: {\r\n    backgroundColor: \"#9342f5\",\r\n    paddingRight: \"79px\",\r\n    paddingLeft: \"25px\",\r\n\r\n  },\r\n  drawer: {\r\n    width: 240,\r\n    flexShrink: 0,\r\n  },\r\n  logo: {\r\n    fontFamily: \"Open Sans, sans-serif\",\r\n    fontWeight: 800,\r\n    color: \"#FFFEFE\",\r\n    textAlign: \"left\",\r\n    textDecoration: 'none'\r\n  },\r\n  menuButton: {\r\n    fontFamily: \"Montserrat, sans-serif\",\r\n    fontWeight: 700,\r\n    size: \"18px\",\r\n    marginLeft: \"38px\",\r\n    color: \"#FFFEFE\",\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n}));\r\n\r\nconst headersData = [\r\n  {\r\n    label: \"Submit\",\r\n    href: \"/Submit\",\r\n  },\r\n  {\r\n    label: \"Models\",\r\n    href: \"/Models\",\r\n  },\r\n  {\r\n    label: \"My Profile\",\r\n    href: \"/Profile\",\r\n  },\r\n  {\r\n    label: \"Log In\",\r\n    href: \"/Login\",\r\n  },\r\n];\r\n\r\nexport default function Header() {\r\n\r\n  const RouteChange = (linkPath) => {\r\n    let history = useHistory();\r\n    history.push(linkPath);\r\n  }\r\n  const { header, logo, menuButton, toolbar } = useStyles();\r\n\r\n  const displayDesktop = () => {\r\n    return (<Toolbar className={toolbar}>\r\n      {aiMenagerieLogo}\r\n      <div>{searchBar}</div>\r\n      <div>{getMenuButtons()}</div>\r\n    </Toolbar>\r\n    );\r\n  };\r\n\r\n  //TODO Make searchbar actually search?\r\n  const searchBar = (\r\n    <SearchBar onChange={() => console.log('onChange')}\r\n      onRequestSearch={() => console.log('onRequestSearch')}\r\n\r\n    />)\r\n  const aiMenagerieLogo = (\r\n    <React.Fragment>\r\n      <Typography variant=\"h6\" component=\"h1\" className={logo}\r\n      ><RLink to=\"/\" className={logo}>\r\n\r\n          Menagerie\r\n      </RLink>\r\n      </Typography></React.Fragment>\r\n  );\r\n  const getMenuButtons = () => {\r\n    return headersData.map(({ label, href }) => {\r\n      return (\r\n        <RLink to={href} className={logo}>\r\n          <Button variant=\"outlined\" key={label}\r\n            color=\"inherit\"\r\n            //to={href}\r\n            //component= {RouterL}\r\n            className={menuButton}\r\n\r\n          >\r\n            {label}\r\n\r\n          </Button></RLink>\r\n\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <header>\r\n      <AppBar position=\"fixed\" className={header}>{displayDesktop()}</AppBar>\r\n    </header>\r\n  );\r\n}\r\n","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\LoginPage.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\Submitpage.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\UserDashboard.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\DiscussionPage.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\pages\\Homepage.js",["132","133","134"],"\r\nimport ClippedDrawer from '../Components/NavContent';\r\nimport React from \"react\";\r\nimport ContentContainer from '../Components/ContentCards';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport * as model_data from './data/model_file';\r\n\r\ndocument.body.style.backgroundColor = \"#d4d4d4\";\r\nclass Homepage extends React.Component {\r\n\r\n  modelSelected = selected_model => {\r\n    this.setState({ model: selected_model }, this.myModelFunction);\r\n    console.log(this.state.model)\r\n\r\n  }\r\n  updateShared = shared_value => {\r\n    console.log(shared_value)\r\n    const filteredcards = this.props.data.filter((card) => card.tags.includes(shared_value))\r\n    this.setState({ filtereddata: filteredcards }, this.myFunction);\r\n\r\n  }\r\n\r\n\r\n  resetfilter = shared_value => {\r\n    this.props.resetfilter(shared_value);\r\n    //const filteredcards = this.state.data.filter((card) => card.resettags.includes(shared_value))\r\n    //this.setState({ filtereddata: filteredcards }, this.myFunction);\r\n\r\n  }\r\n\r\n  myFunction = () => {\r\n    const { filtereddata } = this.state;\r\n  }\r\n\r\n  myModelFunction = () => {\r\n    const { filtereddata } = this.state;\r\n  }\r\n  filtervalue = i => {\r\n    this.props.filtervalue(i);\r\n\r\n  }\r\n  modelSelected = i => {\r\n    this.props.modelSelected(i);\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"App\">\r\n        <Toolbar />\r\n        <ContentContainer dataprop={this.props.filtereddata} modelSelected={this.modelSelected} />\r\n        <ClippedDrawer filter={this.props.filterValue} updateShared={this.filtervalue} resetfilter={this.resetfilter} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Homepage;","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Login.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\discussion.js",["135","136","137","138"],"import React, { useState } from \"react\";\r\n\r\nimport {\r\n  makeStyles,\r\n  createMuiTheme,\r\n  ThemeProvider\r\n} from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { Brightness3, WbSunny } from \"@material-ui/icons\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Comments from \"./comments\";\r\nimport { CssBaseline, Grid } from \"@material-ui/core\";\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  spacing: {\r\n    marginTop: \"50px\"\r\n  },\r\n  header: {\r\n    marginTop: \"40px\",\r\n    fontWeight: 600\r\n  },\r\n  button: {\r\n    color: \"orange\"\r\n  },\r\n  TextField: { color: 'white' }\r\n});\r\n\r\n\r\nexport default function Discuss(props) {\r\n  const handlecomment = (comment) => {\r\n    console.log(comment);\r\n    props.handleComment(comment)\r\n  }\r\n  const [comment, setComment] = useState('');\r\n\r\n  const handleSubmit = event => {\r\n\r\n    setComment(event)\r\n    event.preventDefault();\r\n    console.log('Comment:', comment);\r\n    props.filtered_comment_data.push({ \"postid\": \"54\", \"email\": \"test.dmb4002@med.cornell.edu\", \"body\": comment, \"modelid\": props.modelid, \"name\": \"David Brundage\" });\r\n    document.getElementById(\"comment-form\").reset();\r\n\r\n    fetch('http://localhost:5000/api/comments', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        email: 'dmb4002@med.cornell.edu',\r\n        body: comment,\r\n        name: 'David Brundage',\r\n        modelid: props.modelid,\r\n        postid: 54\r\n      })\r\n    })\r\n    //TODO: Instead of grabbing all comments again maybe only grab the specific comment posted and push to state?\r\n    fetch('http://localhost:5000/api/comments')\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        handlecomment(data)\r\n        console.log(data)\r\n      })\r\n      .catch(console.log)\r\n    //handlecomment(props.filtered_comment_data)\r\n\r\n  }\r\n\r\n  const classes = useStyles();\r\n  //const commentdata = props.filtereddata\r\n  return (\r\n\r\n    <ThemeProvider>\r\n      <CssBaseline>\r\n        <Container>\r\n          <Grid container justify=\"space-between\" className={classes.spacing}>\r\n            <Grid item>\r\n              <Typography className={classes.header} variant=\"h4\" gutterBottom>\r\n                Comments\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n\r\n            </Grid>\r\n          </Grid>\r\n          <form id=\"comment-form\" onSubmit={handleSubmit}>\r\n            <TextField\r\n              onInput={e => setComment(e.target.value)}\r\n              style={{\r\n                backgroundColor: \"white\"\r\n              }}\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Post Comment\"\r\n              multiline\r\n              rows={2}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <IconButton>\r\n                    <InputAdornment position='end'>\r\n                      <Button variant=\"outlined\" color=\"secondary\" type=\"submit\">\r\n                        Submit\r\n      </Button>\r\n                    </InputAdornment>\r\n                  </IconButton>\r\n                ),\r\n              }}\r\n\r\n\r\n            /></form>\r\n          <Comments filtered_comment_data={props.filtered_comment_data} />\r\n        </Container>\r\n      </CssBaseline>\r\n    </ThemeProvider>\r\n  );\r\n\r\n}\r\n","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\dashboard.js",["139","140","141","142","143","144"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listitems';\r\nimport Chart from './Chart';\r\nimport Downloads from './downloadDashTile';\r\nimport Favorites from './favoriteDashTile';\r\nimport Comments from './commentDashTile';\r\nimport Orders from './Orders';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n      </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        zIndex: 800,\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>{mainListItems}</List>\r\n                <Divider />\r\n                <List>{secondaryListItems}</List>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                    <Grid container spacing={3}>\r\n                        {/* Chart */}\r\n                        {/* Recent Deposits */}\r\n                        <Grid item xs={12} md={4} lg={3}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Downloads />\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={8} lg={9}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Chart />\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4} lg={3}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Favorites />\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={8} lg={9}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Chart />\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4} lg={3}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Comments />\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={8} lg={9}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Chart />\r\n                            </Paper>\r\n                        </Grid>\r\n                        {/* Recent Orders */}\r\n                        <Grid item xs={12}>\r\n                            <Paper className={classes.paper}>\r\n                                <Orders />\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Box pt={4}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n}","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\NavContent.js",["145"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport MemoryIcon from '@material-ui/icons/Memory';\r\nimport { SettingsInputAntennaTwoTone } from '@material-ui/icons';\r\n\r\nconst drawerWidth = 250;\r\n//theme fo classes\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    zIndex: 800,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerContainer: {\r\n    overflow: 'auto',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(10),\r\n    paddingBottom: theme.spacing(8)\r\n  },\r\n  card: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  cardMedia: {\r\n    paddingTop: \"56.25%\" // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n\r\n}));\r\n//this is a dictionary to populate the icons for the sidebar\r\nvar iconDict = {\r\n  0: <ImageIcon />,\r\n  1: <DescriptionIcon />,\r\n  2: <BubbleChartIcon />,\r\n  3: <ShowChartIcon />\r\n};\r\n\r\n//start of sidebar drawer code\r\n\r\nexport default function ClippedDrawer(props) {\r\n  const classes = useStyles();\r\n  const updateShared = i => {\r\n    props.updateShared(i);\r\n\r\n  }\r\n\r\n  const resetfilter = i => {\r\n    props.resetfilter(i);\r\n\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <Toolbar />\r\n        <div className={classes.drawerContainer}>\r\n          <List>\r\n            {['Computer Vision', 'Natural Language Processing', 'Unsupervised Learning', 'Machine Learning'].map((text, index) => (\r\n              <ListItem button key={text} onClick={() => updateShared(text)}>\r\n                <ListItemIcon> {iconDict[index]} </ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          <Divider />\r\n          <List>\r\n            {['PyTorch', 'Keras', 'TensorFlow', 'Other'].map((text, index) => (\r\n              <ListItem button key={text} onClick={() => updateShared(text)}>\r\n                <ListItemIcon>{<MemoryIcon />}</ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            ))}\r\n            <Divider />\r\n            <List>\r\n              <ListItem button onClick={() => resetfilter(\"Reset\")}>\r\n                <ListItemIcon>{<MemoryIcon />} </ListItemIcon>\r\n                <ListItemText primary=\"Reset\" />\r\n\r\n              </ListItem>\r\n            </List>\r\n          </List>\r\n        </div>\r\n      </Drawer>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n//TODOs fix expanding of cards to only active card\r\n//API to pull data from bucket to populate cards\r\n//Seperate cards and grid into content file","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\ContentCards.js",["146","147","148","149","150"],"import React, { Component } from 'react';\r\nimport clsx from 'clsx';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport ArrowUpwardSharpIcon from '@material-ui/icons/ArrowUpwardSharp';\r\nimport ArrowDownwardSharpIcon from '@material-ui/icons/ArrowDownwardSharp';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport { Link as RLink } from \"react-router-dom\";\r\nimport { ListItemIcon } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexGrow: 1,\r\n    padding: theme.spacing(2)\r\n  },\r\n  modelCardDetails: {\r\n    fontWeight: \"fontWeightBold\"\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(2),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(10),\r\n    paddingBottom: theme.spacing(8)\r\n  },\r\n  card: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  cardMedia: {\r\n    paddingTop: \"56.25%\" // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n    justify: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    display: \"inline-block\",\r\n    border: \"2px solid white\",\r\n    \"&:not(:first-of-type)\": {\r\n      marginLeft: -theme.spacing.unit\r\n    }\r\n  },\r\n  tags: {\r\n    display: \"inline-block\",\r\n    border: \"2px solid white\",\r\n    \"&:not(:first-of-type)\": {\r\n      marginLeft: -theme.spacing.unit\r\n    }\r\n  },\r\n\r\n}));\r\n\r\nexport default function ContentContainer(props) {\r\n\r\n  const displaycards = props.dataprop\r\n\r\n  //console.log(torchcards)\r\n  const classes = useStyles();\r\n  //function to expand cards\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const [fav, setFav] = React.useState(true);\r\n\r\n  const modelSelected = i => {\r\n    props.modelSelected(i);\r\n\r\n  }\r\n  const handleExpandClick = i => {\r\n    setExpanded(expanded === i ? -1 : i);\r\n  };\r\n  const handleFavoriteClick = i => {\r\n    console.log(i)\r\n    setFav(fav === i ? -1 : i);\r\n  };\r\n\r\n  return (\r\n    //<React.Fragment>\r\n    //<CssBaseline />\r\n    <Container className={classes.cardGrid} maxWidth=\"lg\">\r\n      {/* creating container grid for cards */}\r\n\r\n      <Grid container spacing={2}\r\n        direction=\"row\"\r\n        justify=\"flex-start\"\r\n        alignItems=\"flex-start\">\r\n        {displaycards.map((card, index) => (\r\n          <Grid item key md={6}>\r\n            <Card className={classes.card}>\r\n              <CardActionArea>\r\n                <RLink to=\"/discuss\">\r\n                  <CardMedia\r\n                    onClick={() => modelSelected(card.modelid)}\r\n                    className={classes.cardMedia}\r\n                    image={card.img}\r\n                    title=\"Image title\"\r\n                  /></RLink></CardActionArea>\r\n\r\n              <CardContent className={classes.cardContent}>\r\n                <IconButton className={clsx(classes.favoriteIcon)}\r\n                  onClick={() => handleFavoriteClick(index)}\r\n                  aria-label=\"Favorite\"\r\n                >\r\n                  <ArrowUpwardSharpIcon />\r\n                </IconButton>\r\n                <IconButton>\r\n                  <ArrowDownwardSharpIcon />\r\n                </IconButton>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {card.title}\r\n                </Typography>\r\n                {card['tags'].map(tag => (\r\n                  <div>\r\n                    <Badge className={classes.tags} badgeContent={tag} color=\"secondary\">\r\n                    </Badge></div>))}\r\n              </CardContent>\r\n              <CardActions >\r\n\r\n                <IconButton aria-label=\"GitHub\" >\r\n                  <GitHubIcon onClick={() => window.open(card['github'], \"_blank\")} />\r\n                </IconButton>\r\n                <IconButton aria-label=\"Share\">\r\n                  <ShareIcon />\r\n                </IconButton>\r\n                <IconButton aria-label=\"Download\">\r\n                  <GetAppIcon onClick={() => window.open(card['modelurl'], \"_blank\")} />\r\n                </IconButton>\r\n                <IconButton className={clsx(classes.favoriteIcon)}\r\n                  onClick={() => handleFavoriteClick(index)}\r\n                  aria-label=\"Favorite\"\r\n                >\r\n                  <FavoriteIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                  className={clsx(classes.expand)}\r\n                  onClick={() => handleExpandClick(index)}\r\n                  aria-expanded={expanded}\r\n                  aria-label=\"show more\"\r\n                >\r\n                  <ExpandMoreIcon />\r\n                </IconButton>\r\n                <AvatarGroup max={5} spacing='small'>\r\n                  {card['faces'].map(face => (\r\n                    <Avatar className={classes.avatar} key={face} src={face} style={{ height: '30px', width: '30px' }} />\r\n                  ))}</AvatarGroup>\r\n              </CardActions>\r\n              <Collapse in={expanded === index} timeout=\"auto\" unmountOnExit>\r\n                <CardContent>\r\n                  <Typography paragraph><b>Model Details: </b>{card.cardDetails.modelDetails}</Typography>\r\n                  <Typography paragraph><b>Intended Use: </b>{card.cardDetails.intendedUse}</Typography>\r\n                  <Typography paragraph><b>Factors: </b>{card.cardDetails.factors}</Typography>\r\n                  <Typography paragraph><b>Metrics: </b>{card.cardDetails.metrics}</Typography>\r\n                  <Typography paragraph><b>Training and Evaluation Data: </b>{card.cardDetails.trainEvalData}</Typography>\r\n                  <Typography paragraph><b>Considerations: </b></Typography>\r\n                </CardContent>\r\n\r\n              </Collapse>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Container >\r\n    //</React.Fragment>\r\n  )\r\n}","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Submit.js",["151","152","153","154","155","156","157","158","159","160","161","162","163","164","165"],"import React, { useState, setState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InformationForm from './SubmissionInfo';\r\nimport UploadModel from './ModelUpload';\r\nimport Review from './Review';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Divider from '@material-ui/core/Divider';\r\nconst cards = [\r\n    {\r\n        img:\r\n            \"https://storage.googleapis.com/site-assets-aim/wsi.jfif\",\r\n        desc: \"Whole Slide Image\",\r\n        title: \"HoVer-Net Nuclei Segmentation\",\r\n        tag: ['Computer Vision', 'PyTorch']\r\n    },];\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://menagerie.com/\">\r\n                Menagerie\r\n      </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 1000,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n    stepper: {\r\n        padding: theme.spacing(3, 0, 5),\r\n\r\n    },\r\n    buttons: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(3),\r\n        marginLeft: theme.spacing(1),\r\n        backgroundColor: '#9342f5',\r\n        color: \"#FFFEFE\",\r\n    },\r\n    stepButton: {\r\n        backgroundColor: '#9342f5',\r\n    }, cardGrid: {\r\n        paddingTop: theme.spacing(10),\r\n        paddingBottom: theme.spacing(8)\r\n    },\r\n    card: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    cardMedia: {\r\n        paddingTop: \"56.25%\" // 16:9\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n}));\r\n\r\n\r\nexport default function Checkout() {\r\n\r\n    async function uploadGCP(form) {\r\n        const response = await fetch('http://localhost:5000/api/uploads', {\r\n            method: 'POST',\r\n            body: form\r\n        })\r\n        const responsejson = await response.json()\r\n        return await responsejson\r\n    }\r\n\r\n\r\n    async function uploadHandler(event) {\r\n\r\n        const uploadformData = new FormData();\r\n        uploadformData.append('file', event.target.files[0]);\r\n        const uploadResponse = await uploadGCP(uploadformData)\r\n        setModelURL(prev => uploadResponse['data'])\r\n        //setModelURL(prev => event.target.files[0])\r\n\r\n\r\n    }\r\n\r\n    function uuidv4() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n    const modelid = uuidv4()\r\n    const model_archs = [\"PyTorch\", \"Keras\", \"TensorFlow\", \"Other\"]\r\n    const classes = useStyles();\r\n    //function to expand cards\r\n    const [formdata, setFormData] = useState('')\r\n    const [gcpurl, setModelURL] = useState('')\r\n    const [title, setTitle] = useState('');\r\n    const [details, setDetails] = useState('');\r\n    const [use, setUse] = useState('');\r\n    const [factors, setFactors] = useState('');\r\n    const [metrics, setMetrics] = useState('');\r\n    const [data, setData] = useState('');\r\n    const [github, setGithub] = useState('');\r\n    const [modelarch, setModelarch] = useState({\r\n        pytorch: false,\r\n        tensorflow: false,\r\n        keras: false,\r\n        other: false,\r\n    });\r\n    const [task, setTask] = useState({\r\n        cv: false,\r\n        nlp: false,\r\n    });\r\n    const tags = []\r\n    const handleModelChange = (event) => {\r\n        console.log(event.target.name, event.target.checked)\r\n        setModelarch({ ...modelarch, [event.target.name]: event.target.checked });\r\n    };\r\n    const handleTaskChange = (event) => {\r\n        console.log(event.target.name, event.target.checked)\r\n        setTask({ ...task, [event.target.name]: event.target.checked });\r\n    };\r\n    const { pytorch, tensorflow, keras, other } = modelarch;\r\n    const { cv, nlp } = task;\r\n    const handleSubmit = event => {\r\n        console.log(gcpurl)\r\n        if (cv === true) {\r\n            tags.push(\"CV\")\r\n        } if (nlp === true) {\r\n            tags.push(\"NLP\")\r\n        } if (pytorch === true) {\r\n            tags.push(\"PyTorch\")\r\n        } if (keras === true) {\r\n            tags.push(\"Keras\")\r\n        } if (tensorflow === true) {\r\n            tags.push(\"TensorFlow\")\r\n        } if (other === true) {\r\n            tags.push(\"Other\")\r\n        } else {\r\n\r\n        }\r\n        setTitle(event)\r\n        setDetails(event)\r\n        setUse(event)\r\n        setFactors(event)\r\n        setMetrics(event)\r\n        setData(event)\r\n        setGithub(event)\r\n        event.preventDefault();\r\n        console.log(title, details, use, factors, metrics, data, github, tags, gcpurl)\r\n\r\n        fetch('http://localhost:5000/api/models', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                tags: tags,\r\n                resettags: ['reset'],\r\n                img: '',\r\n                title: title,\r\n                cardDetails: {\r\n                    modelDetails: details,\r\n                    intendedUse: use,\r\n                    factors: factors,\r\n                    metrics: metrics,\r\n                    trainEvalData: data\r\n                },\r\n                github: github,\r\n                modelid: modelid,\r\n                modelurl: gcpurl\r\n\r\n            })\r\n        })\r\n    }\r\n    return (\r\n\r\n        <main className={classes.layout}>\r\n            <Paper className={classes.paper}>\r\n                <React.Fragment>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                        Model Details\r\n      </Typography>\r\n                    <form id=\"model-info-form\" onSubmit={handleSubmit}>\r\n\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    onInput={e => setTitle(e.target.value)}\r\n                                    required\r\n                                    id=\"title\"\r\n                                    name=\"title\"\r\n                                    label=\"Submission Model Name\"\r\n                                    fullWidth\r\n\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    onInput={e => setDetails(e.target.value)}\r\n                                    id=\"outlined-multiline-static\"\r\n                                    label=\"Model Details\"\r\n                                    multiline\r\n                                    rows={3}\r\n                                    //defaultValue=\"Brief Description\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    onInput={e => setUse(e.target.value)}\r\n                                    id=\"outlined-multiline-static\"\r\n                                    label=\"Intended Use\"\r\n                                    multiline\r\n                                    rows={3}\r\n                                    //defaultValue=\"Brief Description\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    onInput={e => setFactors(e.target.value)}\r\n                                    id=\"outlined-multiline-static\"\r\n                                    label=\"Factors\"\r\n                                    multiline\r\n                                    rows={3}\r\n                                    //defaultValue=\"Brief Description\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    onInput={e => setMetrics(e.target.value)}\r\n                                    id=\"outlined-multiline-static\"\r\n                                    label=\"Metrics\"\r\n                                    multiline\r\n                                    rows={3}\r\n                                    //defaultValue=\"Brief Description\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    onInput={e => setData(e.target.value)}\r\n                                    id=\"outlined-multiline-static\"\r\n                                    label=\"Train-Evaluation Data\"\r\n                                    multiline\r\n                                    rows={3}\r\n                                    //defaultValue=\"Brief Description\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    onInput={e => setGithub(e.target.value)}\r\n                                    required\r\n                                    id=\"github\"\r\n                                    name=\"github\"\r\n                                    label=\"GitHub Repo\"\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n\r\n\r\n                            <Grid item xs={12}>\r\n                                <Divider />\r\n                                <Typography variant=\"h6\" gutterBottom>\r\n                                    Select Model to Upload\r\n      </Typography>\r\n                                <input\r\n                                    accept=\"image/*\"\r\n                                    style={{ display: 'none' }}\r\n                                    id=\"raised-button-file\"\r\n                                    multiple\r\n                                    type=\"file\"\r\n                                    onChange={uploadHandler}\r\n                                />\r\n                                <label htmlFor=\"raised-button-file\">\r\n                                    <Button variant=\"contained\" component=\"span\" className={classes.button} >\r\n                                        Upload\r\n  </Button>\r\n                                </label>\r\n                                <div></div>\r\n                                <Typography variant=\"h6\" gutterBottom>\r\n                                    Model Architecture\r\n      </Typography>\r\n                                <Divider />\r\n                                <FormControl component=\"fieldset\">\r\n                                    <FormGroup row>\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox checked={pytorch} onChange={handleModelChange} color=\"secondary\" name=\"pytorch\" value=\"pytorch\" />}\r\n                                            label=\"PyTorch\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox checked={keras} onChange={handleModelChange} color=\"secondary\" name=\"keras\" value=\"keras\" />}\r\n                                            label=\"Keras\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox checked={tensorflow} onChange={handleModelChange} color=\"secondary\" name=\"tensorflow\" value=\"tensorflow\" />}\r\n                                            label=\"TensorFlow\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox checked={other} onChange={handleModelChange} color=\"secondary\" name=\"other\" value=\"other\" />}\r\n                                            label=\"Other\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" gutterBottom>\r\n                                    Task\r\n      </Typography>\r\n                                <Divider />\r\n                                <FormControl component=\"fieldset\">\r\n                                    <FormGroup row>\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox checked={cv} onChange={handleTaskChange} color=\"secondary\" name=\"cv\" value=\"cv\" />}\r\n                                            label=\"Computer Vision\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox checked={nlp} onChange={handleTaskChange} color=\"secondary\" name=\"nlp\" value=\"nlp\" />}\r\n                                            label=\"Natural Language Processing\"\r\n                                        /></FormGroup></FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Divider />\r\n\r\n                        <Button variant=\"outlined\" color=\"secondary\" type=\"submit\" className={classes.button}>\r\n                            Submit\r\n      </Button>\r\n\r\n\r\n                        <Divider />\r\n                    </form>\r\n                </React.Fragment>\r\n                <Copyright />\r\n            </Paper>\r\n        </main>\r\n    );\r\n}","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\comments.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Chart.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\downloadDashTile.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\commentDashTile.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\favoriteDashTile.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\listitems.js",["166"],"import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\n\r\nexport const mainListItems = (\r\n    <div>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Dashboard\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <ShoppingCartIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Downloads\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <PeopleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Comments\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <BarChartIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Favorites\" />\r\n        </ListItem>\r\n    </div>\r\n);\r\n\r\nexport const secondaryListItems = (\r\n    <div>\r\n        <ListSubheader >Saved reports</ListSubheader>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Today\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Month-to-date\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Year-to-date\" />\r\n        </ListItem>\r\n    </div>\r\n);","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Orders.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Title.js",[],"C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\comment.js",["167"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Divider,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport Faker from \"faker\";\r\nimport ArrowUpwardSharpIcon from '@material-ui/icons/ArrowUpwardSharp';\r\nimport ArrowDownwardSharpIcon from '@material-ui/icons/ArrowDownwardSharp';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  fonts: {\r\n    fontWeight: \"bold\"\r\n  },\r\n  inline: {\r\n    display: \"inline\"\r\n  }\r\n}));\r\n\r\nconst Comment = (props) => {\r\n  const comments = props.comments\r\n  console.log(comments)\r\n  const classes = useStyles();\r\n  return (\r\n    <List className={classes.root}>\r\n      {comments.map(comment => {\r\n        console.log(\"Comment\", comment);\r\n        return (\r\n          <React.Fragment key={comment.id}>\r\n            <ListItem key={comment.id} alignItems=\"flex-start\">\r\n              <ListItemAvatar>\r\n                <Avatar alt=\"avatar\" src={comment.avatar} />\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                primary={\r\n                  <Typography className={classes.fonts}>\r\n                    {comment.name}\r\n                  </Typography>\r\n                }\r\n                secondary={\r\n                  <>\r\n                    <Typography\r\n                      component=\"span\"\r\n                      variant=\"body2\"\r\n                      className={classes.inline}\r\n                      color=\"textPrimary\"\r\n                    >\r\n                      {comment.email}\r\n                    </Typography>\r\n                    {` - ${comment.body}`}\r\n                    <p style={{ textAlign: \"left\", color: \"gray\" }}>\r\n                      posted 1 minute ago\r\n            </p>\r\n                  </>\r\n                }\r\n              />\r\n              <IconButton>\r\n                <ArrowUpwardSharpIcon />\r\n              </IconButton>\r\n              <IconButton>\r\n                <ArrowDownwardSharpIcon />\r\n              </IconButton>\r\n            </ListItem>\r\n            <Divider />\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default Comment;","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\ModelUpload.js",["168","169","170","171"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { Button } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        fontFamily: \"Montserrat, sans-serif\",\r\n        fontWeight: 700,\r\n        size: \"18px\",\r\n        marginLeft: \"38px\",\r\n    },\r\n}));\r\n\r\nexport default function UploadModel() {\r\n    const classes = useStyles();\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Select Model to Upload\r\n      </Typography>\r\n            <input\r\n                accept=\"image/*\"\r\n                style={{ display: 'none' }}\r\n                id=\"raised-button-file\"\r\n                multiple\r\n                type=\"file\"\r\n            />\r\n\r\n            <Button variant=\"contained\" component=\"span\" className={classes.button} >\r\n                Upload\r\n  </Button>\r\n\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\Review.js",["172"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst models = [\r\n    { name: 'Submission Title', desc: 'Submission Details', price: \"['PyTorch', 'Computer Vision']\" },\r\n    ,\r\n];\r\n\r\nconst fileDetails = [\r\n    { name: 'File Name', detail: 'Segmentation_Model' },\r\n    { name: 'File Extension', detail: '.PT' },\r\n    { name: 'File Size', detail: '1.3GB' },\r\n    { name: 'Model Date', detail: '04/2024' },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    listItem: {\r\n        padding: theme.spacing(1, 0),\r\n    },\r\n    total: {\r\n        fontWeight: 700,\r\n    },\r\n    title: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function Review() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Submission Summary\r\n      </Typography>\r\n            <List disablePadding>\r\n                {models.map((product) => (\r\n                    <ListItem className={classes.listItem} key={product.name}>\r\n                        <ListItemText primary={product.name} secondary={product.desc} />\r\n                        <Typography variant=\"body2\">{product.price}</Typography>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\r\n\r\n            <Grid item container direction=\"column\" xs={12} sm={6}>\r\n                <Typography variant=\"h6\" gutterBottom className={classes.title}>\r\n                    File Details\r\n          </Typography>\r\n                <Grid container>\r\n                    {fileDetails.map((payment) => (\r\n                        <React.Fragment key={payment.name}>\r\n                            <Grid item xs={6}>\r\n                                <Typography gutterBottom>{payment.name}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Typography gutterBottom>{payment.detail}</Typography>\r\n                            </Grid>\r\n                        </React.Fragment>\r\n                    ))}\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\dmbru\\Desktop\\menagerie\\modelmarket\\model-market\\src\\Components\\SubmissionInfo.js",[],["173","174"],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":67,"column":90,"nodeType":"181","messageId":"182","endLine":67,"endColumn":92},{"ruleId":"183","severity":1,"message":"184","line":73,"column":13,"nodeType":"185","messageId":"186","endLine":73,"endColumn":34},{"ruleId":"183","severity":1,"message":"187","line":1,"column":59,"nodeType":"185","messageId":"186","endLine":1,"endColumn":63},{"ruleId":"183","severity":1,"message":"188","line":4,"column":25,"nodeType":"185","messageId":"186","endLine":4,"endColumn":33},{"ruleId":"183","severity":1,"message":"189","line":5,"column":8,"nodeType":"185","messageId":"186","endLine":5,"endColumn":16},{"ruleId":"183","severity":1,"message":"190","line":60,"column":9,"nodeType":"185","messageId":"186","endLine":60,"endColumn":20},{"ruleId":"183","severity":1,"message":"191","line":6,"column":13,"nodeType":"185","messageId":"186","endLine":6,"endColumn":23},{"ruleId":"183","severity":1,"message":"192","line":32,"column":13,"nodeType":"185","messageId":"186","endLine":32,"endColumn":25},{"ruleId":"183","severity":1,"message":"192","line":36,"column":13,"nodeType":"185","messageId":"186","endLine":36,"endColumn":25},{"ruleId":"183","severity":1,"message":"193","line":5,"column":3,"nodeType":"185","messageId":"186","endLine":5,"endColumn":17},{"ruleId":"183","severity":1,"message":"194","line":13,"column":10,"nodeType":"185","messageId":"186","endLine":13,"endColumn":21},{"ruleId":"183","severity":1,"message":"195","line":13,"column":23,"nodeType":"185","messageId":"186","endLine":13,"endColumn":30},{"ruleId":"183","severity":1,"message":"196","line":18,"column":8,"nodeType":"185","messageId":"186","endLine":18,"endColumn":21},{"ruleId":"183","severity":1,"message":"197","line":7,"column":8,"nodeType":"185","messageId":"186","endLine":7,"endColumn":14},{"ruleId":"183","severity":1,"message":"198","line":8,"column":8,"nodeType":"185","messageId":"186","endLine":8,"endColumn":15},{"ruleId":"183","severity":1,"message":"199","line":13,"column":8,"nodeType":"185","messageId":"186","endLine":13,"endColumn":13},{"ruleId":"183","severity":1,"message":"200","line":18,"column":8,"nodeType":"185","messageId":"186","endLine":18,"endColumn":16},{"ruleId":"183","severity":1,"message":"201","line":20,"column":8,"nodeType":"185","messageId":"186","endLine":20,"endColumn":25},{"ruleId":"183","severity":1,"message":"202","line":126,"column":11,"nodeType":"185","messageId":"186","endLine":126,"endColumn":27},{"ruleId":"183","severity":1,"message":"203","line":16,"column":10,"nodeType":"185","messageId":"186","endLine":16,"endColumn":37},{"ruleId":"183","severity":1,"message":"204","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":26},{"ruleId":"183","severity":1,"message":"205","line":4,"column":8,"nodeType":"185","messageId":"186","endLine":4,"endColumn":14},{"ruleId":"183","severity":1,"message":"187","line":11,"column":8,"nodeType":"185","messageId":"186","endLine":11,"endColumn":12},{"ruleId":"183","severity":1,"message":"198","line":20,"column":8,"nodeType":"185","messageId":"186","endLine":20,"endColumn":15},{"ruleId":"183","severity":1,"message":"206","line":28,"column":10,"nodeType":"185","messageId":"186","endLine":28,"endColumn":22},{"ruleId":"183","severity":1,"message":"207","line":1,"column":27,"nodeType":"185","messageId":"186","endLine":1,"endColumn":35},{"ruleId":"183","severity":1,"message":"208","line":1,"column":37,"nodeType":"185","messageId":"186","endLine":1,"endColumn":46},{"ruleId":"183","severity":1,"message":"209","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":19},{"ruleId":"183","severity":1,"message":"197","line":4,"column":8,"nodeType":"185","messageId":"186","endLine":4,"endColumn":14},{"ruleId":"183","severity":1,"message":"198","line":5,"column":8,"nodeType":"185","messageId":"186","endLine":5,"endColumn":15},{"ruleId":"183","severity":1,"message":"210","line":10,"column":8,"nodeType":"185","messageId":"186","endLine":10,"endColumn":23},{"ruleId":"183","severity":1,"message":"211","line":11,"column":8,"nodeType":"185","messageId":"186","endLine":11,"endColumn":19},{"ruleId":"183","severity":1,"message":"212","line":12,"column":8,"nodeType":"185","messageId":"186","endLine":12,"endColumn":14},{"ruleId":"183","severity":1,"message":"213","line":20,"column":7,"nodeType":"185","messageId":"186","endLine":20,"endColumn":12},{"ruleId":"179","severity":1,"message":"180","line":136,"column":51,"nodeType":"181","messageId":"182","endLine":136,"endColumn":53},{"ruleId":"214","severity":1,"message":"215","line":136,"column":67,"nodeType":"181","messageId":"216","endLine":136,"endColumn":68},{"ruleId":"214","severity":1,"message":"215","line":136,"column":73,"nodeType":"181","messageId":"216","endLine":136,"endColumn":74},{"ruleId":"183","severity":1,"message":"217","line":141,"column":11,"nodeType":"185","messageId":"186","endLine":141,"endColumn":22},{"ruleId":"183","severity":1,"message":"218","line":144,"column":12,"nodeType":"185","messageId":"186","endLine":144,"endColumn":20},{"ruleId":"183","severity":1,"message":"219","line":144,"column":22,"nodeType":"185","messageId":"186","endLine":144,"endColumn":33},{"ruleId":"183","severity":1,"message":"220","line":10,"column":8,"nodeType":"185","messageId":"186","endLine":10,"endColumn":18},{"ruleId":"183","severity":1,"message":"221","line":12,"column":8,"nodeType":"185","messageId":"186","endLine":12,"endColumn":13},{"ruleId":"183","severity":1,"message":"222","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":12},{"ruleId":"183","severity":1,"message":"223","line":4,"column":8,"nodeType":"185","messageId":"186","endLine":4,"endColumn":17},{"ruleId":"183","severity":1,"message":"224","line":5,"column":8,"nodeType":"185","messageId":"186","endLine":5,"endColumn":24},{"ruleId":"183","severity":1,"message":"225","line":6,"column":8,"nodeType":"185","messageId":"186","endLine":6,"endColumn":16},{"ruleId":"226","severity":1,"message":"227","line":9,"column":16,"nodeType":"228","messageId":"229","endLine":12,"endColumn":2},{"ruleId":"175","replacedBy":"230"},{"ruleId":"177","replacedBy":"231"},"no-native-reassign",["232"],"no-negated-in-lhs",["233"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'filtered_comment_data' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Redirect' is defined but never used.","'HomeIcon' is defined but never used.","'RouteChange' is assigned a value but never used.","'model_data' is defined but never used.","'filtereddata' is assigned a value but never used.","'createMuiTheme' is defined but never used.","'Brightness3' is defined but never used.","'WbSunny' is defined but never used.","'AccountCircle' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Badge' is defined but never used.","'MenuIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'handleDrawerOpen' is assigned a value but never used.","'SettingsInputAntennaTwoTone' is defined but never used.","'Component' is defined but never used.","'Button' is defined but never used.","'ListItemIcon' is defined but never used.","'setState' is defined but never used.","'useEffect' is defined but never used.","'CssBaseline' is defined but never used.","'InformationForm' is defined but never used.","'UploadModel' is defined but never used.","'Review' is defined but never used.","'cards' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&' and '|'.","unexpectedMixedOperator","'model_archs' is assigned a value but never used.","'formdata' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'LayersIcon' is defined but never used.","'Faker' is defined but never used.","'Grid' is defined but never used.","'TextField' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray",["232"],["233"],"no-global-assign","no-unsafe-negation"]